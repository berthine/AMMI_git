## Logistic regression from scratch
    #Data
    #Initialize weight
    #compute gradient
    # predict with sigmoid function
    #predict classes

class LogisticRegression:
    
    def fit(self, X,y, lr=0.002, epsilon = 0.0001):
        self.weights = np.zeros(X.shape[1]+1)
        X = self.add_bias(X) # add column of 1 to X
        
        for _ in range(1000):
            gradient = np.dot((y-self.predict(X, False)),X)
            update = lr*gradient
            self.weights = self.weights + update
            if np.max(np.abs(update))<epsilon: break
    
    def predict(self, X, no_bias=True):
        if no_bias: X=self.add_bias(X)
        return (1/ (1+np.exp(-1*np.dot(X, self.weights )))) 
    
    def pred_classes(self, X):
        return np.vectorize(lambda X: 1 if X>=0.5 else 0)(self.predict(X))
        
        
    def add_bias(self, X):
        return np.insert(X, 0, np.ones(X.shape[0]), axis = 1) 
        
